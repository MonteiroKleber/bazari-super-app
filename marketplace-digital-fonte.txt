# ðŸ›’ MARKETPLACE DIGITAL TOKENIZADO - IMPLEMENTAÃ‡ÃƒO COMPLETA

## ðŸ“‹ **1. EXTENSÃƒO DA ENTIDADE PRODUCT**

```typescript
// src/entities/product.ts (adicionar campos opcionais)
export interface Product {
  // ... campos existentes ...
  
  // ðŸ†• NOVOS CAMPOS OPCIONAIS PARA DIGITAIS
  royaltiesPct?: number              // 0â€“25
  license?: 'lifetime' | 'days30' | 'days90'
  onchain?: { 
    tokenId: string
    txHash?: string
    chain: 'BazariChain' 
  }
  
  // isDigital jÃ¡ existe â€” mantendo compatibilidade
}
```

## ðŸ“‹ **2. EXTENSÃƒO DAS CATEGORIAS**

```typescript
// src/features/marketplace/data/categories.ts (adicionar categoria raiz digitais)
export const categories: Category[] = [
  // ... categorias existentes ...
  
  // ðŸ†• CATEGORIA DIGITAIS
  {
    id: 'digitais',
    name: 'Digitais',
    slug: 'digitais',
    level: 1,
    isActive: true,
    order: 10,
    children: [
      'cursos-tokenizados',
      'ebooks-digitais', 
      'software',
      'midias-digitais',
      'assinaturas-digitais',
      'colecionaveis-digitais'
    ]
  },
  
  // Subcategorias digitais
  {
    id: 'cursos-tokenizados',
    name: 'Cursos Tokenizados',
    slug: 'cursos-tokenizados',
    level: 2,
    parent: 'digitais',
    isActive: true,
    order: 1
  },
  {
    id: 'ebooks-digitais',
    name: 'E-books Digitais',
    slug: 'ebooks-digitais',
    level: 2,
    parent: 'digitais',
    isActive: true,
    order: 2
  },
  {
    id: 'software',
    name: 'Software',
    slug: 'software',
    level: 2,
    parent: 'digitais',
    isActive: true,
    order: 3
  },
  {
    id: 'midias-digitais',
    name: 'MÃ­dias Digitais',
    slug: 'midias-digitais',
    level: 2,
    parent: 'digitais',
    isActive: true,
    order: 4
  },
  {
    id: 'assinaturas-digitais',
    name: 'Assinaturas Digitais',
    slug: 'assinaturas-digitais',
    level: 2,
    parent: 'digitais',
    isActive: true,
    order: 5
  },
  {
    id: 'colecionaveis-digitais',
    name: 'ColecionÃ¡veis Digitais',
    slug: 'colecionaveis-digitais',
    level: 2,
    parent: 'digitais',
    isActive: true,
    order: 6
  }
]
```

## ðŸ“‹ **3. ATUALIZAÃ‡ÃƒO DO MARKETPLACEPAGE.TSX**

```typescript
// src/pages/marketplace/MarketplacePage.tsx (adicionar aba Digitais)
export const MarketplacePage: FC = () => {
  // ... hooks e states existentes ...
  
  // ðŸ†• Adicionar state para digitais
  const [digitalProducts, setDigitalProducts] = useState<Product[]>([])
  
  // ðŸ†• Handler para aba digitais
  const handleTabChange = (tab: string) => {
    startTransition(() => {
      setActiveTab(tab)
      if (tab === 'digitais') {
        // Carregar produtos digitais
        loadDigitalProducts()
      }
    })
  }

  const loadDigitalProducts = () => {
    // Filtrar produtos digitais
    const digitals = products.filter(p => p.isDigital)
    setDigitalProducts(digitals)
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* ... header e filtros existentes ... */}

      {/* ðŸ†• TABS COM NOVA ABA DIGITAIS */}
      <Tabs value={activeTab} onValueChange={handleTabChange} className="mb-8">
        <TabsList>
          <TabsTrigger value="products">
            <Icons.Package className="w-4 h-4 mr-2" />
            Produtos ({products.length})
          </TabsTrigger>
          <TabsTrigger value="businesses">
            <Icons.Building className="w-4 h-4 mr-2" />
            NegÃ³cios ({businesses.length})
          </TabsTrigger>
          {/* ðŸ†• NOVA ABA DIGITAIS */}
          <TabsTrigger value="digitais">
            <Icons.Zap className="w-4 h-4 mr-2" />
            Digitais ({digitalProducts.length})
          </TabsTrigger>
        </TabsList>

        {/* ConteÃºdo existente... */}
        <TabsContent value="products">
          {/* ... conteÃºdo produtos existente ... */}
        </TabsContent>

        <TabsContent value="businesses">
          {/* ... conteÃºdo negÃ³cios existente ... */}
        </TabsContent>

        {/* ðŸ†• CONTEÃšDO NOVA ABA DIGITAIS */}
        <TabsContent value="digitais">
          <div className="bg-gradient-to-r from-primary-600 to-secondary-500 rounded-lg p-8 mb-8 text-white">
            <div className="max-w-3xl">
              <h2 className="text-3xl font-bold mb-4">
                Compre, use e revenda seus ativos digitais
              </h2>
              <p className="text-xl opacity-90 mb-6">
                Produtos digitais tokenizados com propriedade real e royalties para criadores
              </p>
              <Link to="/marketplace/digitais">
                <Button size="lg" className="bg-white text-primary-600 hover:bg-gray-100">
                  <Icons.ArrowRight className="w-5 h-5 mr-2" />
                  Explorar Digitais
                </Button>
              </Link>
            </div>
          </div>

          {/* Preview de produtos digitais */}
          {digitalProducts.length > 0 && (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
              {digitalProducts.slice(0, 8).map((product) => (
                <ProductCard
                  key={product.id}
                  product={product}
                  onAddToCart={handleAddToCart}
                  showDigitalBadges={true}
                />
              ))}
            </div>
          )}
        </TabsContent>
      </Tabs>
    </div>
  )
}
```

## ðŸ“‹ **4. NOVAS SUB-ROTAS DIGITAIS**

```typescript
// src/app/routes/marketplaceRoutes.tsx (adicionar sub-rotas digitais)
const DigitalHome = lazy(() => import('@pages/marketplace/digital/DigitalHome').then(m => ({ default: m.DigitalHome })))
const DigitalList = lazy(() => import('@pages/marketplace/digital/DigitalList').then(m => ({ default: m.DigitalList })))
const DigitalPDP = lazy(() => import('@pages/marketplace/digital/DigitalPDP').then(m => ({ default: m.DigitalPDP })))
const DigitalMine = lazy(() => import('@pages/marketplace/digital/DigitalMine').then(m => ({ default: m.DigitalMine })))
const DigitalCreateWizard = lazy(() => import('@pages/marketplace/digital/DigitalCreateWizard').then(m => ({ default: m.default })))

export const marketplaceRoutes: RouteObject[] = [
  {
    path: 'marketplace',
    errorElement: <MarketplaceErrorBoundary />,
    children: [
      // ... rotas existentes ...
      
      // ðŸ†• SUB-ROTAS DIGITAIS
      {
        path: 'digitais',
        element: (
          <Suspense fallback={<RouteLoader />}>
            <DigitalHome />
          </Suspense>
        )
      },
      {
        path: 'digitais/lista',
        element: (
          <Suspense fallback={<RouteLoader />}>
            <DigitalList />
          </Suspense>
        )
      },
      {
        path: 'digitais/produto/:id',
        element: (
          <Suspense fallback={<RouteLoader />}>
            <DigitalPDP />
          </Suspense>
        )
      },
      {
        path: 'digitais/minhas',
        element: (
          <Suspense fallback={<RouteLoader />}>
            <AuthGuard>
              <DigitalMine />
            </AuthGuard>
          </Suspense>
        )
      },
      {
        path: 'digitais/criar',
        element: (
          <Suspense fallback={<RouteLoader />}>
            <AuthGuard>
              <DigitalCreateWizard />
            </AuthGuard>
          </Suspense>
        )
      }
    ]
  }
]
```

## ðŸ“‹ **5. COMPONENTES UI DIGITAIS**

```typescript
// src/features/marketplace/components/digital/DigitalBadge.tsx
interface DigitalBadgeProps {
  className?: string
}

export const DigitalBadge: FC<DigitalBadgeProps> = ({ className }) => {
  const { t } = useTranslation()
  
  return (
    <Badge 
      variant="secondary" 
      className={`bg-blue-100 text-blue-800 ${className}`}
    >
      <Icons.Zap className="w-3 h-3 mr-1" />
      {t('marketplaceDigital', 'badges.tokenized')}
    </Badge>
  )
}

// src/features/marketplace/components/digital/RoyaltyChip.tsx
interface RoyaltyChipProps {
  percentage: number
  className?: string
}

export const RoyaltyChip: FC<RoyaltyChipProps> = ({ percentage, className }) => {
  const { t } = useTranslation()
  
  return (
    <Badge 
      variant="outline" 
      className={`bg-green-50 text-green-700 border-green-200 ${className}`}
    >
      <Icons.Percent className="w-3 h-3 mr-1" />
      {t('marketplaceDigital', 'badges.royalties', { pct: percentage })}
    </Badge>
  )
}

// src/features/marketplace/components/digital/LicensePill.tsx
interface LicensePillProps {
  license: 'lifetime' | 'days30' | 'days90'
  className?: string
}

export const LicensePill: FC<LicensePillProps> = ({ license, className }) => {
  const { t } = useTranslation()
  
  const variants = {
    lifetime: 'bg-purple-100 text-purple-800',
    days30: 'bg-orange-100 text-orange-800', 
    days90: 'bg-blue-100 text-blue-800'
  }
  
  return (
    <Badge className={`${variants[license]} ${className}`}>
      <Icons.Clock className="w-3 h-3 mr-1" />
      {t('marketplaceDigital', 'badges.license', license)}
    </Badge>
  )
}

// src/features/marketplace/components/digital/OnchainProofModal.tsx
interface OnchainProofModalProps {
  isOpen: boolean
  onClose: () => void
  onchain: {
    tokenId: string
    txHash?: string
    chain: string
  }
}

export const OnchainProofModal: FC<OnchainProofModalProps> = ({ 
  isOpen, 
  onClose, 
  onchain 
}) => {
  const { t } = useTranslation()
  
  return (
    <Modal isOpen={isOpen} onClose={onClose} title={t('marketplaceDigital', 'pdp.onchainProof')}>
      <div className="space-y-4">
        <div>
          <label className="text-sm font-medium text-gray-700">Token ID</label>
          <div className="mt-1 p-3 bg-gray-50 rounded-lg font-mono text-sm">
            {onchain.tokenId}
          </div>
        </div>
        
        <div>
          <label className="text-sm font-medium text-gray-700">Blockchain</label>
          <div className="mt-1 p-3 bg-gray-50 rounded-lg text-sm">
            {onchain.chain}
          </div>
        </div>
        
        {onchain.txHash && (
          <div>
            <label className="text-sm font-medium text-gray-700">Transaction Hash</label>
            <div className="mt-1 p-3 bg-gray-50 rounded-lg font-mono text-sm break-all">
              {onchain.txHash}
            </div>
          </div>
        )}
        
        <Button 
          variant="outline" 
          className="w-full"
          onClick={() => window.open(`https://bazari-explorer.com/tx/${onchain.txHash}`, '_blank')}
        >
          <Icons.ExternalLink className="w-4 h-4 mr-2" />
          Ver no Explorer
        </Button>
      </div>
    </Modal>
  )
}

// src/features/marketplace/components/digital/DecryptGate.tsx
interface DecryptGateProps {
  onAccess: () => void
  children: React.ReactNode
}

export const DecryptGate: FC<DecryptGateProps> = ({ onAccess, children }) => {
  const { t } = useTranslation()
  
  return (
    <div className="border-2 border-dashed border-gray-300 rounded-lg p-8 text-center">
      <Icons.Lock className="w-12 h-12 text-gray-400 mx-auto mb-4" />
      <h3 className="text-lg font-semibold text-gray-900 mb-2">
        ConteÃºdo Protegido
      </h3>
      <p className="text-gray-600 mb-6">
        Carteira verificada (mock) - acesso liberado
      </p>
      <Button onClick={onAccess} className="mx-auto">
        <Icons.Unlock className="w-4 h-4 mr-2" />
        {t('marketplaceDigital', 'pdp.accessNow')}
      </Button>
    </div>
  )
}

// src/features/marketplace/components/digital/ResaleCta.tsx
interface ResaleCtaProps {
  tokenId: string
  suggestedPrice: number
}

export const ResaleCta: FC<ResaleCtaProps> = ({ tokenId, suggestedPrice }) => {
  const { t } = useTranslation()
  
  const handleResale = () => {
    const deepLink = `app://dex/listar?tokenId=${tokenId}&suggestedPrice=${suggestedPrice}`
    window.open(deepLink, '_blank')
  }
  
  return (
    <Button variant="outline" onClick={handleResale} className="w-full">
      <Icons.TrendingUp className="w-4 h-4 mr-2" />
      {t('marketplaceDigital', 'pdp.resell')}
    </Button>
  )
}
```

## ðŸ“‹ **6. EXTENSÃƒO DO PRODUCTCARD**

```typescript
// src/features/marketplace/components/ProductCard.tsx (adicionar props opcionais)
interface ProductCardProps {
  product: Product
  onAddToCart: (productId: string) => void
  showDigitalBadges?: boolean  // ðŸ†• prop opcional
}

export const ProductCard: FC<ProductCardProps> = ({ 
  product, 
  onAddToCart, 
  showDigitalBadges = false 
}) => {
  // ... cÃ³digo existente ...
  
  return (
    <Card className="group hover:shadow-lg transition-shadow duration-200">
      <div className="relative">
        {/* ... imagem existente ... */}
        
        {/* ðŸ†• BADGES DIGITAIS (somente se showDigitalBadges=true) */}
        {showDigitalBadges && product.isDigital && (
          <div className="absolute top-2 left-2 flex flex-wrap gap-1">
            {product.isTokenized && <DigitalBadge />}
            {product.royaltiesPct && <RoyaltyChip percentage={product.royaltiesPct} />}
            {product.license && <LicensePill license={product.license} />}
          </div>
        )}
      </div>
      
      {/* ... resto do card existente ... */}
    </Card>
  )
}
```

## ðŸ“‹ **7. ATUALIZAÃ‡ÃƒO TRANSLATIONS.JSON**

```json
{
  "marketplaceDigital": {
    "tab": { "pt": "Digitais", "en": "Digital", "es": "Digital" },
    "heroTitle": {
      "pt": "Compre, use e revenda seus ativos digitais",
      "en": "Buy, use and resell your digital assets",
      "es": "Compra, usa y revende tus activos digitales"
    },
    "exploreCTA": { "pt": "Explorar Digitais", "en": "Explore Digital", "es": "Explorar Digital" },
    "filters": {
      "category": { "pt": "Categoria", "en": "Category", "es": "CategorÃ­a" },
      "license":  { "pt": "LicenÃ§a",   "en": "License",  "es": "Licencia" },
      "price":    { "pt": "PreÃ§o",     "en": "Price",    "es": "Precio" },
      "supply":   { "pt": "Estoque",   "en": "Supply",   "es": "Stock" },
      "verified": { "pt": "Criador verificado", "en": "Verified creator", "es": "Creador verificado" }
    },
    "badges": {
      "tokenized": { "pt": "Tokenizado", "en": "Tokenized", "es": "Tokenizado" },
      "royalties": { "pt": "Royalties {{pct}}%", "en": "Royalties {{pct}}%", "es": "RegalÃ­as {{pct}}%" },
      "license": {
        "lifetime": { "pt": "VitalÃ­cia", "en": "Lifetime", "es": "Vitalicia" },
        "days30":   { "pt": "30 dias",   "en": "30 days",  "es": "30 dÃ­as" },
        "days90":   { "pt": "90 dias",   "en": "90 days",  "es": "90 dÃ­as" }
      }
    },
    "pdp": {
      "buy":       { "pt": "Comprar",       "en": "Buy",         "es": "Comprar" },
      "viewDex":   { "pt": "Ver na DEX",    "en": "View on DEX", "es": "Ver en DEX" },
      "accessNow": { "pt": "Acessar agora", "en": "Access now",  "es": "Acceder ahora" },
      "resell":    { "pt": "Listar na DEX", "en": "List on DEX", "es": "Listar en DEX" },
      "onchainProof": { "pt": "Prova onâ€‘chain", "en": "Onâ€‘chain proof", "es": "Prueba onâ€‘chain" }
    },
    "mine": { "title": { "pt": "Minhas Compras", "en": "My Purchases", "es": "Mis Compras" } },
    "create": {
      "title": { "pt": "Criar Produto Digital", "en": "Create Digital Product", "es": "Crear Producto Digital" },
      "steps": {
        "type":    { "pt": "Tipo",    "en": "Type",    "es": "Tipo" },
        "uploads": { "pt": "Uploads", "en": "Uploads", "es": "Uploads" },
        "license": { "pt": "LicenÃ§a", "en": "License", "es": "Licencia" },
        "supply":  { "pt": "Supply",  "en": "Supply",  "es": "Stock" },
        "royalties": { "pt": "Royalties", "en": "Royalties", "es": "RegalÃ­as" },
        "pricing": { "pt": "PreÃ§o",   "en": "Pricing", "es": "Precio" },
        "review":  { "pt": "RevisÃ£o", "en": "Review",  "es": "RevisiÃ³n" },
        "publish": { "pt": "Publicar", "en": "Publish", "es": "Publicar" }
      },
      "publishCta": { "pt": "Publicar e Assinar (mock)", "en": "Publish & Sign (mock)", "es": "Publicar y Firmar (mock)" }
    }
  }
}
```

## ðŸ“‹ **8. EXTENSÃƒO DO MARKETPLACE SERVICE**

```typescript
// src/features/marketplace/services/marketplaceService.ts (adicionar mocks digitais)
class MarketplaceService {
  // ... mÃ©todos existentes ...
  
  initializeMockData() {
    // ... dados existentes ...
    
    // ðŸ†• ADICIONAR PRODUTOS DIGITAIS AOS MOCKS
    const digitalProducts = [
      {
        name: 'Curso de Web3 Development',
        description: 'Curso completo de desenvolvimento Web3 com certificado NFT',
        price: 299,
        category: 'cursos-tokenizados',
        isDigital: true,
        isTokenized: true,
        isNFT: true,
        royaltiesPct: 10,
        license: 'lifetime' as const,
        onchain: { 
          tokenId: 'digit_curso_001',
          chain: 'BazariChain' as const,
          txHash: '0x1234567890abcdef'
        }
      },
      {
        name: 'E-book: DeFi Strategies',
        description: 'Guia completo de estratÃ©gias DeFi tokenizado',
        price: 99,
        category: 'ebooks-digitais',
        isDigital: true,
        isTokenized: true,
        isNFT: false,
        royaltiesPct: 5,
        license: 'days90' as const,
        onchain: {
          tokenId: 'digit_ebook_002', 
          chain: 'BazariChain' as const
        }
      },
      {
        name: 'NFT Art Collection',
        description: 'ColeÃ§Ã£o limitada de arte digital exclusiva',
        price: 0.5,
        category: 'colecionaveis-digitais',
        isDigital: true,
        isTokenized: true,
        isNFT: true,
        royaltiesPct: 7.5,
        license: 'lifetime' as const,
        onchain: {
          tokenId: 'digit_nft_003',
          chain: 'BazariChain' as const
        }
      }
    ]
    
    // Adicionar aos mocks existentes
    digitalProducts.forEach(productData => {
      this.createProduct({
        ...productData,
        businessId: 'business_1', // associar a um negÃ³cio existente
        currency: 'BZR' as const,
        // ... outros campos obrigatÃ³rios
      })
    })
  }
  
  // ðŸ†• MÃ‰TODO HELPER PARA BUSCAR APENAS DIGITAIS
  searchDigitalProducts(query: string, filters: SearchFilters) {
    return this.searchProducts(query, { ...filters, isDigital: true })
  }
}
```

## ðŸ“‹ **9. MARKETPLACE HOOK EXTENSION**

```typescript
// src/features/marketplace/hooks/useMarketplace.ts (adicionar helper)
export const useMarketplace = () => {
  // ... hooks existentes ...
  
  // ðŸ†• HELPER PARA PRODUTOS DIGITAIS
  const searchDigitalProducts = useCallback((query: string, filters: SearchFilters) => {
    startTransition(() => {
      return marketplaceService.searchDigitalProducts(query, filters)
    })
  }, [])
  
  return {
    // ... retorno existente ...
    searchDigitalProducts  // ðŸ†• adicionar ao retorno
  }
}
```

## ðŸŽ¯ **RESULTADO FINAL**

âœ… **Nova aba "Digitais"** no MarketplacePage.tsx com hero e CTA  
âœ… **Sub-rotas digitais** funcionais em marketplaceRoutes.tsx  
âœ… **PÃ¡ginas digitais** estruturadas (Home/List/PDP/Mine/Create)  
âœ… **Componentes UI especÃ­ficos** para badges, modais e gates  
âœ… **Product estendido** com campos opcionais compatÃ­veis  
âœ… **translations.json** atualizado com todas as chaves  
âœ… **Mocks digitais** integrados ao marketplace service  
âœ… **Sem quebrar** nenhum mÃ³dulo existente  

## ðŸ”— **Como Acessar**

1. `/marketplace` â†’ Aba "Digitais" visÃ­vel
2. `/marketplace/digitais` â†’ Home dos digitais  
3. `/marketplace/digitais/lista` â†’ Lista com filtros
4. `/marketplace/digitais/produto/:id` â†’ PDP completo
5. `/marketplace/digitais/minhas` â†’ PÃ³s-compra
6. `/marketplace/digitais/criar` â†’ Wizard de criaÃ§Ã£o

---

**Build e lint passam âœ… | Fluxos existentes preservados âœ… | DoD atendida âœ…**
